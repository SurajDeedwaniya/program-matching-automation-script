name: Daily Program & Brochure Reports

# Run daily at 18:00 IST => 12:30 UTC
on:
  schedule:
    - cron: '30 12 * * *'
  workflow_dispatch: {}  # allow manual runs

jobs:
  run-report:
    runs-on: ubuntu-latest
    steps:  
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install system packages (tesseract, etc)
        run: sudo apt-get update && sudo apt-get install -y tesseract-ocr libtesseract-dev

      - name: Create /content and write service_account.json from secret
        env:
          SERVICE_ACCOUNT_JSON: ${{ secrets.SERVICE_ACCOUNT_JSON }}
        run: |
          mkdir -p /content
          # write the service account JSON (needs to be added as a secret)
          if [ -n "$SERVICE_ACCOUNT_JSON" ]; then
            echo "$SERVICE_ACCOUNT_JSON" > /content/service_account.json
            echo "Wrote service_account.json to /content/"
          else
            echo "SERVICE_ACCOUNT_JSON secret not present. Exiting."
            exit 1
          fi

      - name: Ensure programs.json is available under /content
        run: |
          if [ -f ./programs.json ]; then
            cp ./programs.json /content/programs.json
          else
            echo "programs.json not found in repo root. Please add programs.json to repo." && exit 1
          fi

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run pipeline (non-interactive)
        env:
          # provided via Actions secrets (configure in repo)
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          SKIP_SEMANTIC_VALIDATION: ${{ secrets.SKIP_SEMANTIC_VALIDATION }}
        run: |
          # ensure python file name matches what you committed
          python final_program_data_sync.py

        - name: Send email with attachments
        env:
          WORKDIR: ${{ github.workspace }}
          SMTP_HOST: ${{ secrets.SMTP_HOST }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
          SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
          EMAIL_TO: ${{ secrets.EMAIL_TO }}
          EMAIL_FROM: ${{ secrets.EMAIL_FROM }}
          EMAIL_SUBJECT: "Daily Program & Brochure Reports"
          EMAIL_BODY: "Attached are the daily mismatch reports (if any)."
        run: |
          python send_email.py
